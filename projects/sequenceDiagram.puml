@startuml
actor Professor as P
actor Aluno as A
actor EmpresaParceira as EP
participant "Front-End" as FE
participant "API Back-End" as BE
participant "Banco de Dados" as DB

== Cadastro de Alunos ==
A -> FE: Acessa página de cadastro de aluno
activate FE
FE -> A: Exibe formulário de cadastro de aluno
deactivate FE
A -> FE: Preenche dados e envia formulário
activate FE
FE -> BE: POST /api/alunos (dados do aluno)
activate BE
BE -> DB: Salva dados do aluno
activate DB
DB --> BE: Confirmação de sucesso
deactivate DB
BE --> FE: Confirmação de cadastro
deactivate BE
FE --> A: Exibe mensagem de sucesso
deactivate FE

== Cadastro de Empresa Parceira ==
EP -> FE: Acessa página de cadastro de empresa
activate FE
FE -> EP: Exibe formulário de cadastro de empresa
deactivate FE
EP -> FE: Preenche dados da empresa e envia
activate FE
FE -> BE: POST /api/empresas (dados da empresa)
activate BE
BE -> DB: Salva dados da empresa
activate DB
DB --> BE: Confirmação de sucesso
deactivate DB
BE --> FE: Confirmação de cadastro
deactivate BE
FE --> EP: Exibe mensagem de sucesso
deactivate FE

== Envio de Moedas (Professor para Aluno) ==
P -> FE: Acessa página de envio de moedas
activate FE
FE -> P: Exibe formulário de envio de moedas
deactivate FE
P -> FE: Preenche dados do aluno, quantidade e motivo e envia
activate FE
FE -> BE: POST /api/enviarMoedas (alunoID, quantidade, motivo)
activate BE
BE -> DB: Verifica saldo do professor e registra transação
activate DB
DB --> BE: Confirmação de transação e atualização do saldo
deactivate DB
BE --> FE: Confirmação de envio de moedas
deactivate BE
FE -> A: Notifica aluno por email
deactivate FE

== Consulta de Extrato por ID ==
A -> FE: Acessa página de consulta de extrato
activate FE
FE -> A: Solicita ID do usuário para consulta
deactivate FE
A -> FE: Informa ID do usuário
activate FE
FE -> BE: GET /api/extrato/{userID}
activate BE
BE -> DB: Consulta transações pelo userID
activate DB
DB --> BE: Retorna lista de transações
deactivate DB
BE --> FE: Envia lista de transações
deactivate BE
FE -> A: Exibe extrato do usuário
deactivate FE

== Cadastro de Vantagens (Empresa Parceira) ==
EP -> FE: Acessa página de cadastro de vantagens
activate FE
FE -> EP: Exibe formulário de cadastro de vantagens
deactivate FE
EP -> FE: Preenche dados da vantagem e envia
activate FE
FE -> BE: POST /api/vantagens (dados da vantagem)
activate BE
BE -> DB: Salva dados da vantagem
activate DB
DB --> BE: Confirmação de sucesso
deactivate DB
BE --> FE: Confirmação de cadastro
deactivate BE
FE --> EP: Exibe mensagem de sucesso
deactivate FE

== Listagem de Vantagens (Aluno) ==
A -> FE: Acessa página de listagem de vantagens
activate FE
FE -> BE: GET /api/vantagens
activate BE
BE -> DB: Consulta lista de vantagens
activate DB
DB --> BE: Retorna lista de vantagens
deactivate DB
BE --> FE: Retorna dados das vantagens
deactivate BE
FE -> A: Exibe lista de vantagens
deactivate FE

== Troca de Vantagens ==
A -> FE: Acessa página de troca de vantagens
activate FE
FE -> BE: GET /api/vantagens
activate BE
BE -> DB: Consulta lista de vantagens
activate DB
DB --> BE: Retorna lista de vantagens
deactivate DB
BE --> FE: Retorna dados das vantagens
deactivate BE
FE -> A: Exibe lista de vantagens
deactivate FE

A -> FE: Seleciona vantagem para troca
activate FE
FE -> A: Exibe confirmação da troca
deactivate FE
A -> FE: Confirma troca
activate FE
FE -> BE: POST /api/trocarVantagens (vantagemId)
activate BE
BE -> DB: Verifica saldo do aluno
activate DB
DB --> BE: Saldo suficiente?
deactivate DB
BE -> DB: Registra transação de troca
activate DB
DB --> BE: Confirmação de troca
 deactivate DB
 BE --> FE: Confirmação de sucesso
 deactivate BE
 FE -> A: Exibe mensagem de troca realizada
 deactivate FE

@enduml
